<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cursor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed=0;
lock=noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// If Player 1 simply move to mouse
if(attached.player=1)
{
    x=mouse_x;
    y=mouse_y;
}

// If player two move with the right stick, or lockon by pressing it in
if(attached.player=2)
{
    x=mouse_x;
    y=mouse_y;
    /* Move with RStick freely when not locked
    if(lock=noone)
    {
        if(gamepad_check_button(1,padCLeft) = true)
        { 
            x-=15+0.05*distance_to_object(attached);
        }
        if(gamepad_check_button(1,padCRight) = true)
        {
            x+=15+0.05*distance_to_object(attached);
        }
        if(gamepad_check_button(1,padCUp) = true)
        {
            y-=15+0.05*distance_to_object(attached);
        }
        if(gamepad_check_button(1,padCDown) = true)
        {
            y+=15+0.05*distance_to_object(attached);
        }
        x+=attached.hspeed;
        y+=attached.vspeed;
        
         // Lock on by pressing RStick
        if(gamepad_check_button_released(1,padRThumb))
        {
            lock=instance_nearest(x,y,obj_body);
            if (lock.team = attached.team)
            {
                lock=noone;
            }
        }
        
    }
    else // Allow only a little bit of movement when locked
    {
        if(gamepad_check_button(1,padCLeft) = true)
        { 
            x-=4;
        }
        if(gamepad_check_button(1,padCRight) = true)
        {
            x+=4;
        }
        if(gamepad_check_button(1,padCUp) = true)
        {
            y-=4;
        }
        if(gamepad_check_button(1,padCDown) = true)
        {
            y+=4;
        }
        
        x+=lock.hspeed;
        y+=lock.vspeed;
        
         // Remove lock of RStick pressed after already locked on
        if(gamepad_check_button_released(1,padRThumb))
        {
            lock=noone;
            x=attached.x+96*cos(degtorad(point_direction(attached.x,attached.y,x,y)));
            y=attached.y-96*sin(degtorad(point_direction(attached.x,attached.y,x,y)));
        }
        
    }
    */
}

// Keep crosshair within the view or within the lockon range
if(lock!=noone)
{
    if(x&lt;lock.x-16)
    {
        x=lock.x-16;
    }
    if(x&gt;lock.x+16)
    {
        x=lock.x+16;
    }
    if(y&lt;lock.y-16)
    {
        y=lock.y-16;
    }
    if(y&gt;lock.y+16)
    {
        y=lock.y+16;
    }
    
}
else // Keep in view if not locked onto anything
{   
    if(x&lt;view_xview[view_current])
    {
        x=view_xview[view_current];
    }
    if(x&gt;view_xview[view_current]+view_wview[view_current])
    {
        x=view_xview[view_current]+view_wview[view_current];
    }
    if(y&lt;view_yview[view_current])
    {
        y=view_yview[view_current];
    }
    if(y&gt;view_yview[view_current]+352)
    {
        y=view_yview[view_current]+352;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(image_blend);
draw_set_alpha(0.1);
draw_line(attached.x+attached.rArmXOffset,attached.y+attached.rArmYOffset,x,y);
draw_set_alpha(1);
if(lock=noone)
{
    draw_sprite_ext(spr_cursor,0,x,y,1,1,0,image_blend,1);
}
else
{
    draw_sprite_ext(spr_cursor,0,x,y,1,1,0,image_blend,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
