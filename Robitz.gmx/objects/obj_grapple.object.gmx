<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_grapple</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>obj_basicBullet</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ready Player Grapple
attached.energy = 100;
attached.image_index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reel in on Death

attack=0;
speed = -8;

direction = point_direction(attached.x,attached.y,x,y);
image_angle = direction;

if(distance_to_point(attached.x,attached.y) &lt; 12)
{
    instance_destroy();
}
else if (distance_to_point(attached.x,attached.y) &lt; 48)
{
    speed = -12;
}

alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Grapple Movement

depth = attached.depth;
image_angle = direction;

if(attached.hp&lt;=0 )
{
    instance_destroy();
}

// Grapple Max Distance Reel
attached.energy = 100 - 0.5 * distance_to_point(attached.x,attached.y);
if(attached.energy &lt; 0)
    attached.energy = 0;

// Reel in on Mouse Release or Distance Maxed
if(attached.attached.player=1)
{
    if (attached.energy &lt;= 0 || 
     (isLeft &amp;&amp; not mouse_check_button(mb_left)) || 
    (!isLeft &amp;&amp; not mouse_check_button(mb_right)))
    {
        attack = 0;
        alarm[0] = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collision Events
block = instance_place(x+hspeed,y+vspeed,obj_block);

// Latch on
if(block != noone)
{
    if(attack &gt; 0)
    {
        speed = 0;
        if(y &gt; block.bbox_bottom)
        {
            y = block.bbox_bottom;
        }
        if(y &lt; block.bbox_top)
        {
            y = block.bbox_top;
        }
        if(x &gt; block.bbox_right)
        {
            x = block.bbox_right;
        }
        if(x &lt; block.bbox_left)
        {
            x = block.bbox_left;
        }
        
        direction = point_direction(attached.x,attached.y,x,y);
        
        attached.attached.vlaunchSpeed+=0.015*(distance_to_object(attached.attached))*-sin(degtorad(direction));
        attached.attached.hlaunchSpeed-=0.02*(distance_to_object(attached.attached))*-cos(degtorad(direction));
        attached.attached.vlaunchSpeed*=(0.9025);
        
        // Damage Breakable Blocks
        if(block.object_index = obj_blockBreakable)
        {
            if(block.hp &gt; 0)
            {
                block.hp-=0.1*attack;
                block.image_index=ceil(0.03*(100-block.hp));
            }
            else 
            {
                with(block) alarm[0] = 1;
                sound_play(snd_break);
                
                attack = 0;
                alarm[0] = 1;
            }
        }
        
        // No Latching to Junk
        if(block.object_index = obj_blockJunk)
        {
            sound_play(snd_break);
            
            j=instance_create(x,y,obj_debris);
            j.sprite_index=spr_item;
            j.image_index=random(8);
            j.direction=direction;
            j.speed=-0.1*speed;
            j.image_blend=make_colour_hsv(random(255), random(255), random(255));
            j.image_speed=0;
                
            alarm[0]=1; // Reel In
        }

    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_blockJunk">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Collision in Step</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_blockBreakable">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Collision in Step</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_block">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Collision in Step</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reel in on Room End
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Rope Line and Grapple Hook

// Draw Rope

draw_set_colour(c_black);
draw_line_width(attached.x+2*cos(degtorad(attached.direction)),attached.y-2*sin(degtorad(attached.direction)),x,y,5);
draw_set_colour(c_dkgray);
draw_line_width(attached.x+2*cos(degtorad(attached.direction)),attached.y-2*sin(degtorad(attached.direction)),x,y,3);
draw_set_colour(c_ltgray);
draw_line_width(attached.x+2*cos(degtorad(attached.direction)),attached.y-2*sin(degtorad(attached.direction)),x,y,1);

// Draw Hook
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
